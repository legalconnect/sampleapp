// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './types.gen';

export class AppointmentsService {
    /**
     * Gets Appointments
     * Gets all Appointment scheduled between User and Legal Practitioner <br />
     * An Appointment is a video, audio or chat session booked/scheduled between a User and a Legal Practitioner for a given Service under a given Subscription. <br />
     * @param data The data for the request.
     * @param data.clientUserId User Id
     * @param data.statuses Filter based on session status
     * * `Pending` - Pending,
     * * `Started` - Appointment Session has started,
     * * `Ended` - Appointment Session has ended,
     * * `Cancelled` - Appointment was cancelled,
     * * `Missed` - Appointment was missed.,
     * * `Rescheduled` - Appointment was rescheduled,
     * @param data.from The starting date schedulted rage to filter the appointments result
     * @param data.to The ending date range of the schedule to filter the appointments result.
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1Appointments(data: $OpenApiTs['/api/v1/appointments']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/appointments']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/appointments',
            query: {
                clientUserId: data.clientUserId,
                statuses: data.statuses,
                from: data.from,
                to: data.to,
                disablePagination: data.disablePagination,
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Creates Appointment
     * Creates an appointment under a given Subscription.<br />
     * An Appointment is a video, audio or chat session booked/scheduled between a User and a Legal Practitioner for a given Service under a given Subscription. <br />
     * In order to attached Appointment file,
     * * 1.Upload the files using Upload Appointment Files endpoint under Documents
     * * 2.Add array object response you got from endpoint above to this request as Files
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static postApiV1Appointments(data: $OpenApiTs['/api/v1/appointments']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/appointments']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/appointments',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Reschedule Appointment
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static putApiV1AppointmentsReschedule(data: $OpenApiTs['/api/v1/appointments/reschedule']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/appointments/reschedule']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/appointments/reschedule',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
}

export class ClientsService {
    /**
     * Get Authenticated Client Details
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Common_Dtos_ClientDto__LegalConnect_Common__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1ClientsMe(): CancelablePromise<$OpenApiTs['/api/v1/clients/Me']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/clients/Me',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
}

export class DocumentsService {
    /**
     * Get My Files
     * @param data The data for the request.
     * @param data.name Text value to filter by the File Name. Uses contains query
     * @param data.signingRequried True if results should return only files that have been sent out for signatures
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1DocumentsMe(data: $OpenApiTs['/api/v1/documents/me']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/documents/me']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/me',
            query: {
                name: data.name,
                signingRequried: data.signingRequried,
                disablePagination: data.disablePagination,
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Upload Appointment files
     * @param data The data for the request.
     * @param data.subscriptionId Subscription Id
     * @param data.legalPractitionerUserId User Id of Legal Practitioner
     * @param data.formData
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<System_Collections_Generic_List_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e_> Success
     * @throws ApiError
     */
    public static postApiV1DocumentsAppointmentsBySubscriptionIdByLegalPractitionerUserId(data: $OpenApiTs['/api/v1/documents/appointments/{subscriptionId}/{legalPractitionerUserId}']['post']['req']): CancelablePromise<$OpenApiTs['/api/v1/documents/appointments/{subscriptionId}/{legalPractitionerUserId}']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/appointments/{subscriptionId}/{legalPractitionerUserId}',
            path: {
                subscriptionId: data.subscriptionId,
                legalPractitionerUserId: data.legalPractitionerUserId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Upload files
     * @param data The data for the request.
     * @param data.formData
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<System_Collections_Generic_List_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e_> Success
     * @throws ApiError
     */
    public static postApiV1DocumentsSave(data: $OpenApiTs['/api/v1/documents/save']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/documents/save']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/save',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Create Embedded Signature Request
     * Creates a link that can be used to embed LegalConnect document editor into an app using an iFrame.<br />
     * This link allows users of an app to place signature fields on a document to send for signatures
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestClaim__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static postApiV1DocumentsEmbeddedSignatureRequest(data: $OpenApiTs['/api/v1/documents/embedded-signature-request']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/documents/embedded-signature-request']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/embedded-signature-request',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
}

export class LegalPractitionersService {
    /**
     * Get Legal Practitioners
     * A Legal Practitioner is a Legal Professional/Lawyer on the LegalConnect platform who offers a variety of Legal Services. [See our services](https://legalconnectonline.com/#our-services)
     * @param data The data for the request.
     * @param data.email Email of Legal Practitioner to filter by - uses contains query
     * @param data.firstName First name of Legal Practitioner to filter by - uses contains query
     * @param data.lastName Last name of Legal Practitioner to filter by - uses contains query
     * @param data.languages Filter by language spoken by Legal Practitioners
     * @param data.location Filter by city of residence of Legal Practitioners
     * @param data.services Filter by list of Services offered by Legal Practitioners
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1Legalpractitioners(data: $OpenApiTs['/api/v1/legalpractitioners']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners',
            query: {
                email: data.email,
                firstName: data.firstName,
                lastName: data.lastName,
                languages: data.languages,
                location: data.location,
                services: data.services,
                disablePagination: data.disablePagination,
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Get Practitioner
     * A Legal Practitioner is a Legal Professional/Lawyer on the LegalConnect offer a variety of Legal Services. [See our services](https://legalconnectonline.com/#our-services)
     * @param data The data for the request.
     * @param data.userId Legal Practitioner User Id
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1LegalpractitionersByUserId(data: $OpenApiTs['/api/v1/legalpractitioners/{userId}']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners/{userId}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners/{userId}',
            path: {
                userId: data.userId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Get Schedule of Legal Practitioner
     * The schedule is a weekly availability of a Legal Practitioner.<br />
     * This is a list of date ranges per day of the week.
     * @param data The data for the request.
     * @param data.userId
     * @param data.practitionerId User Id of Legal Practitioner
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_PractitionerScheduleDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1LegalpractitionersByUserIdSchedule(data: $OpenApiTs['/api/v1/legalpractitioners/{userId}/schedule']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners/{userId}/schedule']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners/{userId}/schedule',
            path: {
                userId: data.userId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Get Booking Slots of Legal Practitioner
     * @param data The data for the request.
     * @param data.userId User Id of Legal Practitioner
     * @param data.packageId Service Package Id
     * @param data.date Day of schedule
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<System_Collections_Generic_List_1__System_DateTime__System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e_> Success
     * @throws ApiError
     */
    public static getApiV1LegalpractitionersByUserIdScheduleSlots(data: $OpenApiTs['/api/v1/legalpractitioners/{userId}/schedule/slots']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners/{userId}/schedule/slots']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners/{userId}/schedule/slots',
            path: {
                userId: data.userId
            },
            query: {
                packageId: data.packageId,
                variationId: data.variationId,
                date: data.date
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Get Reviews of Legal Practitioner
     * The Review is a rating on the scale of 1-5 and an optional comment user leaves after an sessions with a Legal Practitioner
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_PractitionerScheduleDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1LegalpractitionersByUserIdReviews(data: $OpenApiTs['/api/v1/legalpractitioners/{userId}/reviews']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners/{userId}/reviews']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners/{userId}/reviews',
            path: {
                userId: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Get Cities
     * Gets the list of cities of residence of Legal Practitioners on the platform
     * With the list of cities, you can filter Legal Practitioner by cities they reside in
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<System_Collections_Generic_List_1__System_String__System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e_> Success
     * @throws ApiError
     */
    public static getApiV1LegalpractitionersCities(): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners/cities']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners/cities',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Get Languages
     * Get's the list of languages spoken by Legal Practitioners on the LegalConnect platform. <br />
     * With the list of Languages, you can filter Legal Practitioner by language spoken
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<System_Collections_Generic_List_1__System_String__System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e_> Success
     * @throws ApiError
     */
    public static getApiV1LegalpractitionersLanguages(): CancelablePromise<$OpenApiTs['/api/v1/legalpractitioners/languages']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/legalpractitioners/languages',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
}

export class ServicesService {
    /**
     * Gets Services
     * Get a Paginated List of Services <br />
     * Services are Legal expertise on the LegalConnect platform that Legal Practitioners or Lawyers can offer.<br />
     * [See our services](https://legalconnectonline.com/#our-services)
     * @param data The data for the request.
     * @param data.categoryIds Category Ids of Service Categories to filter by
     * @param data.searchParam Text value to filter by the Service Title. Uses contains query
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1Services(data: $OpenApiTs['/api/v1/services']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/services']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/services',
            query: {
                categoryIds: data.categoryIds,
                searchParam: data.searchParam,
                disablePagination: data.disablePagination,
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Gets Service Details
     * @param data The data for the request.
     * @param data.id Service Id
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1ServicesById(data: $OpenApiTs['/api/v1/services/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/services/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/services/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Gets Service Package
     * Gets Price Packages of Service Variation
     * Variations represent different pricing options available for the service.
     * Most service have only one variation while others may vary in pricing based on other parameters listed in the Label property
     * @param data The data for the request.
     * @param data.id Service Variation Id
     * @param data.country Country user is accessing this Legal Service from. This is used to calculate the tax amount for the packages.
     * @param data.numberOfPages Only required when Service variation is of "Document Review"
     * @param data.campaignCode Discount Code
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<System_Collections_Generic_List_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationPackagesOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e_> Success
     * @throws ApiError
     */
    public static getApiV1ServicesVariationsByIdPackages(data: $OpenApiTs['/api/v1/services/variations/{id}/packages']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/services/variations/{id}/packages']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/services/variations/{id}/packages',
            path: {
                id: data.id
            },
            query: {
                country: data.country,
                numberOfPages: data.numberOfPages,
                campaignCode: data.campaignCode
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Gets Service Categories
     * @param data The data for the request.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceCategoryOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1ServicesCategories(data: $OpenApiTs['/api/v1/services/categories']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/services/categories']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/services/categories',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount,
                disablePagination: data.disablePagination
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
}

export class SubscriptionsService {
    /**
     * Gets Subscription
     * Gets all Subscriptions for User<br />
     * A Subscription is a contract between a User and a Legal Practitioner for a given Service. <br />
     * A Subcription can allow multiple Appointments to be booked based on the Service Variation's Package bought by the user. <br />
     * Simply put, a Subscription is a purchased Service Variation Package.
     * @param data The data for the request.
     * @param data.practitionerUserId Legal Practitioner User Id
     * @param data.clientUserId Client Id thus User Id
     * @param data.serviceId Service Variation Id
     * @param data.statuses Specific Subscription Statuses of Subscription to filter by
     * Subscription status
     * * `0` - Pending,
     * * `1` - Active,
     * * `2` - Closed,
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1SubscriptionsUsers(data: $OpenApiTs['/api/v1/subscriptions/users']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/subscriptions/users']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/subscriptions/users',
            query: {
                practitionerUserId: data.practitionerUserId,
                clientUserId: data.clientUserId,
                serviceId: data.serviceId,
                statuses: data.statuses,
                disablePagination: data.disablePagination,
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Gets Subscription Available
     * Gets active Subscription between User and Legal Practitioner for a given Service Variations <br />
     * A Subscription is a contract between a User and a Legal Practitioner for a given Service. <br />
     * A Subcription can allow multiple Appointments to be booked based on the Service Variation's Package bought by the user. <br />
     * Simply put, a Subscription is a purchased Service Variation Package.
     * @param data The data for the request.
     * @param data.practitionerUserId Legal Practitioner User Id
     * @param data.clientUserId Client Id thus User Id
     * @param data.serviceId Service Variation Id
     * @param data.statuses Specific Subscription Statuses of Subscription to filter by
     * Subscription status
     * * `0` - Pending,
     * * `1` - Active,
     * * `2` - Closed,
     * @param data.disablePagination If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     * @param data.page Page number of record. NB: Zero indexed based
     * @param data.pageSize Page size of records. Default to 20
     * @param data.skipCount
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static getApiV1SubscriptionsAvailable(data: $OpenApiTs['/api/v1/subscriptions/available']['get']['req']): CancelablePromise<$OpenApiTs['/api/v1/subscriptions/available']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/subscriptions/available',
            query: {
                practitionerUserId: data.practitionerUserId,
                clientUserId: data.clientUserId,
                serviceId: data.serviceId,
                statuses: data.statuses,
                disablePagination: data.disablePagination,
                page: data.page,
                pageSize: data.pageSize,
                skipCount: data.skipCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
    /**
     * Create Subscription
     * Create a Subscription will create a user's fisrt Appointment with the Legal Practitioner.
     * @param data The data for the request.
     * @param data.formData
     * @returns LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1<Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
     * @throws ApiError
     */
    public static postApiV1Subscriptions(data: $OpenApiTs['/api/v1/subscriptions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/api/v1/subscriptions']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/subscriptions',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                500: 'Server Error'
            }
        });
    }
    
}