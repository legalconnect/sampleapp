// This file is auto-generated by @hey-api/openapi-ts

export const $Developer_Dashboard_HttpAggregator_Contracts_Appointments_CreateAppointmentInputDto = {
    required: ['scheduleDate', 'subscriptionId'],
    type: 'object',
    properties: {
        subscriptionId: {
            type: 'integer',
            description: 'Subscription Id',
            format: 'int32'
        },
        scheduleDate: {
            type: 'string',
            description: 'Appointment schedule date',
            format: 'date-time'
        },
        discussionNotes: {
            type: 'string',
            description: 'Text notes to be shared with Legal Practitioner ahead of first Appointment',
            nullable: true
        },
        files: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Documents.GetFileOutputDto'
            },
            description: 'Appointment files shared with Lawyer',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Appointment Id',
            format: 'int32'
        },
        discussionNotes: {
            type: 'string',
            description: 'Discussion notes indicated by user at point of book an appointment with Legal Practitioner',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/LegalConnect.Common.Enums.SessionStatus'
        },
        reason: {
            type: 'string',
            description: 'Optional reason why appointment was cancelled or rescheduled.',
            nullable: true
        },
        scheduleDate: {
            type: 'string',
            description: 'Schedule Date',
            format: 'date-time'
        },
        startDate: {
            type: 'string',
            format: 'date-time'
        },
        startTime: {
            type: 'string',
            description: 'Time the Appointment session begins',
            format: 'date-time'
        },
        endTime: {
            type: 'string',
            description: 'Time the Appointment session ends',
            format: 'date-time'
        },
        communicationMedium: {
            '$ref': '#/components/schemas/LegalConnect.Common.Enums.CommunicationMedium'
        },
        packageTitle: {
            type: 'string',
            description: 'Service Package name',
            nullable: true
        },
        serviceTitle: {
            type: 'string',
            description: 'Legal Serive name',
            nullable: true
        },
        subscriptionId: {
            type: 'integer',
            description: 'Subscription Id',
            format: 'int32'
        },
        clientUserId: {
            type: 'string',
            description: 'User Id',
            nullable: true
        },
        practitionerUserId: {
            type: 'string',
            description: 'Legal Practitioner User Id',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'An Appointment Object'
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Appointments_RescheduleApppointmentInputDto = {
    required: ['appointmentId', 'date'],
    type: 'object',
    properties: {
        appointmentId: {
            type: 'integer',
            description: 'Appointment Id',
            format: 'int32'
        },
        date: {
            type: 'string',
            description: 'New date',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestClaim = {
    type: 'object',
    properties: {
        claimUrl: {
            type: 'string',
            description: 'Url to use in iFrame to view signature request designer',
            nullable: true
        },
        expiresAt: {
            type: 'integer',
            description: 'How long claim url will be valid - in minutes',
            format: 'int32'
        },
        redirectUrl: {
            type: 'string',
            description: 'The page that opens after the signing session ends.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestInputDto = {
    type: 'object',
    properties: {
        fileId: {
            type: 'string',
            description: 'File Id',
            nullable: true
        },
        recipients: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Documents.UserRequestedToSignDocumentDto'
            },
            description: 'List of recipients to receive email',
            nullable: true
        },
        expiresOn: {
            type: 'string',
            description: `Gets or sets the expiration date and time for the document.
If null, the document does not have an expiration date.`,
            format: 'date-time',
            nullable: true
        },
        signByUltimatum: {
            type: 'string',
            description: `Gets or sets the ultimatum date and time by which the document must be signed.
If null, there is no ultimatum for signing the document.`,
            format: 'date-time',
            nullable: true
        },
        redirectUrl: {
            type: 'string',
            description: 'The page that opens after the signing session ends.',
            nullable: true
        },
        linkExpiration: {
            maximum: 10,
            minimum: 1,
            type: 'integer',
            description: `How long the iFrame url should be valid - in minutes. <br />
1 minute by default. Can be set max to 10 minutes`,
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto = {
    type: 'object',
    properties: {
        fileId: {
            type: 'string',
            description: 'File Id',
            nullable: true
        },
        date: {
            type: 'string',
            description: 'Date created',
            format: 'date-time'
        },
        extension: {
            type: 'string',
            description: 'File extension',
            nullable: true
        },
        name: {
            type: 'string',
            description: 'File name',
            nullable: true
        },
        contentType: {
            type: 'string',
            description: 'Content Type',
            nullable: true
        },
        size: {
            type: 'integer',
            description: 'File size',
            format: 'int64'
        },
        url: {
            type: 'string',
            description: 'File url',
            nullable: true
        },
        mimeType: {
            type: 'string',
            description: 'Mime type',
            nullable: true
        },
        requireSigning: {
            type: 'boolean',
            description: 'True if file requires signing'
        },
        signatureStatus: {
            '$ref': '#/components/schemas/LegalConnect.Common.Enums.SignatureStatus'
        },
        userId: {
            type: 'string',
            description: 'Id of user who uploaded the file',
            nullable: true
        },
        userEmail: {
            type: 'string',
            description: 'Email of user who uploaded the file',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Documents_UserRequestedToSignDocumentDto = {
    required: ['email'],
    type: 'object',
    properties: {
        email: {
            minLength: 1,
            type: 'string',
            description: 'Email of recipient'
        },
        name: {
            type: 'string',
            description: 'Name of Recipient - optional',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto = {
    type: 'object',
    properties: {
        startTime: {
            type: 'string',
            description: 'Start Time',
            format: 'date-time'
        },
        endTime: {
            type: 'string',
            description: 'End Time',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    description: 'Availability Slot'
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_ExceptionDateDto = {
    type: 'object',
    properties: {
        date: {
            type: 'string',
            description: 'Specific Date to be excluded from Schedule',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    description: 'Specific Dates out of schedule'
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto = {
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            description: 'Legal Practitioner Id',
            nullable: true
        },
        firstName: {
            type: 'string',
            description: 'First name',
            nullable: true
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            nullable: true
        },
        email: {
            type: 'string',
            description: 'Email',
            nullable: true
        },
        city: {
            type: 'string',
            description: 'City of residence',
            nullable: true
        },
        state: {
            type: 'string',
            description: 'State of resident',
            nullable: true
        },
        country: {
            type: 'string',
            description: 'Country of resident',
            nullable: true
        },
        avatar: {
            type: 'string',
            description: 'Profile Picture or Avatar',
            nullable: true
        },
        phone: {
            type: 'string',
            description: 'Phone contact',
            nullable: true
        },
        bio: {
            type: 'string',
            description: 'Short biography of LegalPractitioner',
            nullable: true
        },
        averageRating: {
            type: 'number',
            description: 'Average Rating',
            format: 'double'
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LegalConnect.Common.Dtos.LanguageDto'
            },
            description: 'List of Languages spoken by Legal Practitioner',
            nullable: true
        },
        services: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceOutputDto'
            },
            description: 'Services offered by Legal Practitioner',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_PractitionerScheduleDto = {
    type: 'object',
    properties: {
        sunday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: 'Sunday schedule',
            nullable: true
        },
        monday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: "Monday's schedule",
            nullable: true
        },
        tuesday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: "Tuesday's schedule",
            nullable: true
        },
        wednesday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: "Wednesday's schedule",
            nullable: true
        },
        thursday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: "Thursday's schedule",
            nullable: true
        },
        friday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: "Friday's schedule",
            nullable: true
        },
        saturday: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.AvailableTimeDto'
            },
            description: "Saturday's schedule",
            nullable: true
        },
        exceptionDates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.ExceptionDateDto'
            },
            description: 'Specific Dates out of schedule',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Legal Practitioner Schedule per week'
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Reviews_GetReviewInputDto = {
    required: ['userId'],
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            description: 'Page number of record. NB: Zero indexed based',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: 'Page size of records. Default to 20',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            format: 'int32',
            deprecated: true
        },
        disablePagination: {
            type: 'boolean',
            description: 'If set to true, the default paga size of 20 will be ignored if no PageSize is specified.'
        },
        ratings: {
            type: 'array',
            items: {
                type: 'number',
                format: 'double'
            },
            description: 'Filter based on list of Rating values - optional',
            nullable: true
        },
        from: {
            type: 'string',
            description: 'From date rage to filter based on when the Rating was created.',
            format: 'date-time',
            nullable: true
        },
        to: {
            type: 'string',
            description: 'To date rage to filter based on when the Rating was created.',
            format: 'date-time',
            nullable: true
        },
        userId: {
            minLength: 1,
            type: 'string',
            description: 'Legal Practitioner User Id'
        },
        subscriptionId: {
            type: 'integer',
            description: 'Subscription Id - optional',
            format: 'int32'
        },
        sortBy: {
            '$ref': '#/components/schemas/LegalConnect.Common.Enums.ReviewSortParams'
        },
        searchParam: {
            type: 'string',
            description: 'Filter ratings based on comments containing specific text.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceCategoryOutputDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Id of Service Category',
            format: 'int32'
        },
        title: {
            type: 'string',
            description: 'Title of Service Category',
            nullable: true
        },
        description: {
            type: 'string',
            description: 'Description of Service Category',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Id of Service',
            format: 'int32'
        },
        title: {
            type: 'string',
            description: 'Title of Service',
            nullable: true
        },
        description: {
            type: 'string',
            description: 'Description of Service',
            nullable: true
        },
        serviceCategoryId: {
            type: 'integer',
            description: 'Id of Service Category',
            format: 'int32'
        },
        serviceCategoryTitle: {
            type: 'string',
            description: 'Title of Service Category',
            nullable: true
        },
        variations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceVariationOutputDto'
            },
            description: 'Variations represent different pricing options available for the service.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationOutputDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Id of Variation',
            format: 'int32'
        },
        serviceId: {
            type: 'integer',
            description: 'Id of Service the variation belongs to',
            format: 'int32'
        },
        label: {
            type: 'string',
            description: "What the service's pricing module varies by",
            nullable: true
        },
        value: {
            type: 'string',
            description: 'The specific value associated with the variation label influencing its pricing option.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationPackagesOutputDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Id of Variation',
            format: 'int32'
        },
        serviceId: {
            type: 'integer',
            description: 'Id of Service the variation belongs to',
            format: 'int32'
        },
        label: {
            type: 'string',
            description: "What the service's pricing module varies by",
            nullable: true
        },
        value: {
            type: 'string',
            description: 'The specific value associated with the variation label influencing its pricing option.',
            nullable: true
        },
        packages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LegalConnect.Common.Dtos.Services.ServiceVariationPackageDto'
            },
            description: 'Packages of service variation',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto = {
    type: 'object',
    properties: {
        subscriptionId: {
            type: 'integer',
            description: 'Subscription Id',
            format: 'int32'
        },
        status: {
            '$ref': '#/components/schemas/LegalConnect.Common.Enums.SubscriptionStatus'
        },
        dateClosed: {
            type: 'string',
            description: 'Date subscription was closed',
            format: 'date-time'
        },
        clientUserId: {
            type: 'string',
            description: 'Client Id thus User Id',
            nullable: true
        },
        practitionerUserId: {
            type: 'string',
            description: 'Legal Practitioner User Id',
            nullable: true
        },
        packageTitle: {
            type: 'string',
            description: 'Service Package Title',
            nullable: true
        },
        numberOfAppointments: {
            type: 'integer',
            description: 'Total number of appointments for Subscription',
            format: 'int32'
        },
        remainingNumberOfAppointments: {
            type: 'integer',
            description: 'Number of Appointments left in Subscription',
            format: 'int32'
        },
        serviceId: {
            type: 'integer',
            description: 'Service Id',
            format: 'int32'
        },
        service: {
            type: 'string',
            description: 'Name of Service user booked.',
            nullable: true
        },
        taxRate: {
            type: 'number',
            description: 'Tax percentage in decimals',
            format: 'double'
        },
        taxAmount: {
            type: 'number',
            description: 'Tax amount',
            format: 'double'
        },
        discountPercentage: {
            type: 'number',
            description: 'Discount percentage in decimals',
            format: 'double'
        },
        discountAmount: {
            type: 'number',
            description: 'Discount amount',
            format: 'double'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        paymentUrl: {
            type: 'string',
            description: 'Payment link to navigate users to if subscription is for a paid Service',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Common_Dtos_ClientDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        userId: {
            type: 'string',
            nullable: true
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        state: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        profilePhotoUrl: {
            type: 'string',
            nullable: true
        },
        campaignCode: {
            type: 'string',
            nullable: true
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        companies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LegalConnect.Common.Dtos.CompanyDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Common_Dtos_CompanyDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        state: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        registrationNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        industry: {
            type: 'string',
            nullable: true
        },
        adminEmail: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            nullable: true
        },
        admins: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LegalConnect.Common.Dtos.ClientDto'
            },
            nullable: true
        },
        invitedAdmins: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LegalConnect.Common.Dtos.ClientDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Common_Dtos_LanguageDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Language Id',
            format: 'int32'
        },
        name: {
            type: 'string',
            description: 'Name of Language spoken by User',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Language spoken by user'
} as const;

export const $LegalConnect_Common_Dtos_Services_ServiceVariationPackageDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            description: 'Package Id',
            format: 'int32'
        },
        packageId: {
            type: 'integer',
            description: 'Package Type Id',
            format: 'int32'
        },
        rate: {
            type: 'number',
            description: 'Base Price of package',
            format: 'double'
        },
        discountAmount: {
            type: 'number',
            description: 'Discount amount',
            format: 'double'
        },
        discountPercentage: {
            type: 'number',
            description: 'Discount percentage',
            format: 'double'
        },
        taxAmount: {
            type: 'number',
            description: 'Tax amount',
            format: 'double'
        },
        taxRate: {
            type: 'number',
            description: 'Tax percentage',
            format: 'double'
        },
        sessionDuration: {
            type: 'integer',
            description: 'Duration of each session',
            format: 'int32'
        },
        numberOfSession: {
            type: 'integer',
            description: 'Number of allowed sessions',
            format: 'int32'
        },
        packageTitle: {
            type: 'string',
            description: 'Package Type Title',
            nullable: true
        },
        packageDescription: {
            type: 'string',
            description: 'Package Type Description',
            nullable: true
        },
        isChatInclusive: {
            type: 'boolean',
            description: 'If true, one-to-one chat will be available to user'
        },
        isAudioCallInclusive: {
            type: 'boolean',
            description: 'If true, audio calls sessions will be available to user'
        },
        isVideoCallInclusive: {
            type: 'boolean',
            description: 'If true, video call session will be available to user'
        },
        isAudioCallRecorded: {
            type: 'boolean',
            description: 'If true, audio calls will be recorded'
        },
        isVideoCallRecorded: {
            type: 'boolean',
            description: 'If true, video calls will be recorded'
        },
        isPlatformEmailSupportInclusive: {
            type: 'boolean',
            description: 'If true, user will be able to receive customer support via email correspondence'
        },
        isPlatformChatSupportInclusive: {
            type: 'boolean',
            description: 'If true, user will be able to receive customer support via chat'
        },
        isPlatformPhoneSupportInclusive: {
            type: 'boolean',
            description: 'If true, user will be able to receive customer support phone calls'
        },
        isFreeDocumentReviewInclusive: {
            type: 'boolean',
            description: 'If true, user will be able to request for a document review for free'
        }
    },
    additionalProperties: false,
    description: 'Pricing package of a give service variation'
} as const;

export const $LegalConnect_Common_Enums_CommunicationMedium = {
    enum: [0, 1, 2],
    type: 'integer',
    description: `Type of session of a given appointment
* \`0\` - A video call session,
* \`1\` - An Audio only call session,
* \`2\` - A chat only session,`,
    format: 'int32'
} as const;

export const $LegalConnect_Common_Enums_ReviewSortParams = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const $LegalConnect_Common_Enums_SessionStatus = {
    enum: [0, 1, 2, 3, 4, 5],
    type: 'integer',
    description: `Indicates the status of the appointment whether it is 
* \`0\` - Pending,
* \`1\` - Appointment Session has started, 
* \`2\` - Appointment Session has ended,
* \`3\` - Appointment was cancelled,
* \`4\` - Appointment was missed.,
* \`5\` - Appointment was rescheduled,`,
    format: 'int32'
} as const;

export const $LegalConnect_Common_Enums_SignatureStatus = {
    enum: [0, 1],
    type: 'integer',
    description: `Indicates if file has been signed or not
* \`0\` - Pending signatures
* \`1\` - Complete - File has been signed`,
    format: 'int32'
} as const;

export const $LegalConnect_Common_Enums_SubscriptionStatus = {
    enum: [0, 1, 2],
    type: 'integer',
    description: `Subscription status
* \`0\` - Pending,
* \`1\` - Active, 
* \`2\` - Closed,`,
    format: 'int32'
} as const;

export const $LegalConnect_Shared_Core_Http_ErrorInfo = {
    type: 'object',
    properties: {
        code: {
            type: 'integer',
            description: 'Error code.',
            format: 'int32'
        },
        message: {
            type: 'string',
            description: 'Error message.',
            nullable: true
        },
        details: {
            description: 'Error details.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Appointments.GetAppointmentOutputDto'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestClaim__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Documents.EmbeddedSignatureRequestClaim'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.GetLegalPractitionerOutputDto'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_PractitionerScheduleDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.PractitionerScheduleDto'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceOutputDto'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Subscriptions.SubscriptionOutputDto'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Common_Dtos_ClientDto__LegalConnect_Common__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Common.Dtos.ClientDto'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Paging.PagedList%601[[Developer.Dashboard.HttpAggregator.Contracts.Appointments.GetAppointmentOutputDto,%20Developer.Dashboard.HttpAggregator,%20Version=1.0.0.0,%20Culture=neutral,%20PublicKeyToken=null]]'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Paging.PagedList%601[[Developer.Dashboard.HttpAggregator.Contracts.Documents.GetFileOutputDto,%20Developer.Dashboard.HttpAggregator,%20Version=1.0.0.0,%20Culture=neutral,%20PublicKeyToken=null]]'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Paging.PagedList%601[[Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.GetLegalPractitionerOutputDto,%20Developer.Dashboard.HttpAggregator,%20Version=1.0.0.0,%20Culture=neutral,%20PublicKeyToken=null]]'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceCategoryOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Paging.PagedList%601[[Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceCategoryOutputDto,%20Developer.Dashboard.HttpAggregator,%20Version=1.0.0.0,%20Culture=neutral,%20PublicKeyToken=null]]'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Paging.PagedList%601[[Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceOutputDto,%20Developer.Dashboard.HttpAggregator,%20Version=1.0.0.0,%20Culture=neutral,%20PublicKeyToken=null]]'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____LegalConnect_Shared_Core__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Paging.PagedList%601[[Developer.Dashboard.HttpAggregator.Contracts.Subscriptions.SubscriptionOutputDto,%20Developer.Dashboard.HttpAggregator,%20Version=1.0.0.0,%20Culture=neutral,%20PublicKeyToken=null]]'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__System_Collections_Generic_List_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Documents.GetFileOutputDto'
            },
            description: 'The actual result object of Http request. Has value if Success property is true.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__System_Collections_Generic_List_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationPackagesOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceVariationPackagesOutputDto'
            },
            description: 'The actual result object of Http request. Has value if Success property is true.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__System_Collections_Generic_List_1__System_DateTime__System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            type: 'array',
            items: {
                type: 'string',
                format: 'date-time'
            },
            description: 'The actual result object of Http request. Has value if Success property is true.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1__System_Collections_Generic_List_1__System_String__System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e____System_Private_CoreLib__Version_6_0_0_0__Culture_neutral__PublicKeyToken_7cec85d7bea7798e__ = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean',
            description: 'Indicates success status of the result.'
        },
        error: {
            '$ref': '#/components/schemas/LegalConnect.Shared.Core.Http.ErrorInfo'
        },
        result: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The actual result object of Http request. Has value if Success property is true.',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Appointments.GetAppointmentOutputDto'
            },
            nullable: true,
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Documents.GetFileOutputDto'
            },
            nullable: true,
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.LegalPractitioners.GetLegalPractitionerOutputDto'
            },
            nullable: true,
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceCategoryOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceCategoryOutputDto'
            },
            nullable: true,
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Services.ServiceOutputDto'
            },
            nullable: true,
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $LegalConnect_Shared_Core_Paging_PagedList_1__Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto__Developer_Dashboard_HttpAggregator__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__ = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Developer.Dashboard.HttpAggregator.Contracts.Subscriptions.SubscriptionOutputDto'
            },
            nullable: true,
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;