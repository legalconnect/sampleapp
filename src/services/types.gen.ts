// This file is auto-generated by @hey-api/openapi-ts

export type Developer_Dashboard_HttpAggregator_Contracts_Appointments_CreateAppointmentInputDto =
  {
    /**
     * Subscription Id
     */
    subscriptionId: number;
    /**
     * Appointment schedule date
     */
    scheduleDate: string;
    /**
     * Text notes to be shared with Legal Practitioner ahead of first Appointment
     */
    discussionNotes?: string | null;
    /**
     * Appointment files shared with Lawyer
     */
    files?: Array<Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto> | null;
  };

/**
 * An Appointment Object
 */
export type Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto =
  {
    /**
     * Appointment Id
     */
    id?: number;
    /**
     * Discussion notes indicated by user at point of book an appointment with Legal Practitioner
     */
    discussionNotes?: string | null;
    status?: LegalConnect_Common_Enums_SessionStatus;
    /**
     * Optional reason why appointment was cancelled or rescheduled.
     */
    reason?: string | null;
    /**
     * Schedule Date
     */
    scheduleDate?: string;
    startDate?: string;
    /**
     * Time the Appointment session begins
     */
    startTime?: string;
    /**
     * Time the Appointment session ends
     */
    endTime?: string;
    communicationMedium?: LegalConnect_Common_Enums_CommunicationMedium;
    /**
     * Service Package name
     */
    packageTitle?: string | null;
    /**
     * Legal Serive name
     */
    serviceTitle?: string | null;
    /**
     * Subscription Id
     */
    subscriptionId?: number;
    /**
     * User Id
     */
    clientUserId?: string | null;
    /**
     * Legal Practitioner User Id
     */
    practitionerUserId?: string | null;
    practitionerName?: string | null;
    practitionerEmail?: string | null;
    practitionerProfileUrl?: string | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Appointments_RescheduleApppointmentInputDto =
  {
    /**
     * Appointment Id
     */
    appointmentId: number;
    /**
     * New date
     */
    date: string;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestClaim =
  {
    /**
     * Url to use in iFrame to view signature request designer
     */
    claimUrl?: string | null;
    /**
     * How long claim url will be valid - in minutes
     */
    expiresAt?: number;
    /**
     * The page that opens after the signing session ends.
     */
    redirectUrl?: string | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestInputDto =
  {
    /**
     * File Id
     */
    fileId?: string | null;
    /**
     * List of recipients to receive email
     */
    recipients?: Array<Developer_Dashboard_HttpAggregator_Contracts_Documents_UserRequestedToSignDocumentDto> | null;
    /**
     * Gets or sets the expiration date and time for the document.
     * If null, the document does not have an expiration date.
     */
    expiresOn?: string | null;
    /**
     * Gets or sets the ultimatum date and time by which the document must be signed.
     * If null, there is no ultimatum for signing the document.
     */
    signByUltimatum?: string | null;
    /**
     * The page that opens after the signing session ends.
     */
    redirectUrl?: string | null;
    /**
     * How long the iFrame url should be valid - in minutes. <br />
     * 1 minute by default. Can be set max to 10 minutes
     */
    linkExpiration?: number;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto =
  {
    /**
     * File Id
     */
    fileId?: string | null;
    /**
     * Date created
     */
    date?: string;
    /**
     * File extension
     */
    extension?: string | null;
    /**
     * File name
     */
    name?: string | null;
    /**
     * Content Type
     */
    contentType?: string | null;
    /**
     * File size
     */
    size?: number;
    /**
     * File url
     */
    url?: string | null;
    /**
     * Mime type
     */
    mimeType?: string | null;
    /**
     * True if file requires signing
     */
    requireSigning?: boolean;
    signatureStatus?: LegalConnect_Common_Enums_SignatureStatus;
    /**
     * Id of user who uploaded the file
     */
    userId?: string | null;
    /**
     * Email of user who uploaded the file
     */
    userEmail?: string | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileSharedOutputDto = {
    /**
     * File Id
     **/
    fileId: string;
    /**
     * File extension
     **/
    extension?: string;

    /**
     * File name
     **/
    fileName?: string;

    /**
     * File url
     **/
    fileUrl?: string;

    /**
     * True if file requires signing
     **/
    requireSigning: Boolean;

    /**
     * Signature status if File requires signing
     **/
    signatureStatus: LegalConnect_Common_Enums_SignatureStatus;

    /**
     * Users the file was share with
     **/
    usersSharedWith: Array<Developer_Dashboard_HttpAggregator_Contracts_Documents_UserMinimalDto>;
    /**
     * Date
     **/
    lastShared?: string;

    /**
     * Expire date
     **/
    expiresOn?: string;

    /**
     * Signing Ultimatum
     **/
    signByUltimatum?: string;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Documents_UserMinimalDto =
  {
    /**
     * User's name
     */
    name?: string;
    /**
     * User's email
     */
    email?: string
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Documents_UserRequestedToSignDocumentDto =
  {
    /**
     * Email of recipient
     */
    email: string;
    /**
     * Name of Recipient - optional
     */
    name?: string | null;
  };

/**
 * Availability Slot
 */
export type Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto =
  {
    /**
     * Start Time
     */
    startTime?: string;
    /**
     * End Time
     */
    endTime?: string;
  };

/**
 * Specific Dates out of schedule
 */
export type Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_ExceptionDateDto =
  {
    /**
     * Specific Date to be excluded from Schedule
     */
    date?: string;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto =
  {
    /**
     * Legal Practitioner Id
     */
    userId?: string | null;
    /**
     * First name
     */
    firstName?: string | null;
    /**
     * Last name
     */
    lastName?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * City of residence
     */
    city?: string | null;
    /**
     * State of resident
     */
    state?: string | null;
    /**
     * Country of resident
     */
    country?: string | null;
    /**
     * Profile Picture or Avatar
     */
    avatar?: string | null;
    /**
     * Phone contact
     */
    phone?: string | null;
    /**
     * Short biography of LegalPractitioner
     */
    bio?: string | null;
    /**
     * Average Rating
     */
    averageRating?: number;
    /**
     * List of Languages spoken by Legal Practitioner
     */
    languages?: Array<LegalConnect_Common_Dtos_LanguageDto> | null;
    /**
     * Services offered by Legal Practitioner
     */
    services?: Array<Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto> | null;
  };

/**
 * Legal Practitioner Schedule per week
 */
export type Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_PractitionerScheduleDto =
  {
    /**
     * Sunday schedule
     */
    sunday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Monday's schedule
     */
    monday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Tuesday's schedule
     */
    tuesday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Wednesday's schedule
     */
    wednesday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Thursday's schedule
     */
    thursday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Friday's schedule
     */
    friday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Saturday's schedule
     */
    saturday?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_AvailableTimeDto[]
      | null;
    /**
     * Specific Dates out of schedule
     */
    exceptionDates?:
      | Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_ExceptionDateDto[]
      | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Reviews_GetReviewInputDto =
  {
    /**
     * Page number of record. NB: Zero indexed based
     */
    page?: number;
    /**
     * Page size of records. Default to 20
     */
    pageSize?: number;
    /**
     * @deprecated
     */
    skipCount?: number;
    /**
     * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
     */
    disablePagination?: boolean;
    /**
     * Filter based on list of Rating values - optional
     */
    ratings?: Array<number> | null;
    /**
     * From date rage to filter based on when the Rating was created.
     */
    from?: string | null;
    /**
     * To date rage to filter based on when the Rating was created.
     */
    to?: string | null;
    /**
     * Legal Practitioner User Id
     */
    userId: string;
    /**
     * Subscription Id - optional
     */
    subscriptionId?: number;
    sortBy?: LegalConnect_Common_Enums_ReviewSortParams;
    /**
     * Filter ratings based on comments containing specific text.
     */
    searchParam?: string | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceCategoryOutputDto =
  {
    /**
     * Id of Service Category
     */
    id?: number;
    /**
     * Title of Service Category
     */
    title?: string | null;
    /**
     * Description of Service Category
     */
    description?: string | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto =
  {
    /**
     * Id of Service
     */
    serviceId?: number;
    /**
     * Title of Service
     */
    title?: string | null;
    /**
     * Description of Service
     */
    description?: string | null;
    /**
     * Id of Service Category
     */
    serviceCategoryId?: number;
    /**
     * Title of Service Category
     */
    serviceCategoryTitle?: string | null;
    /**
     * Variations represent different pricing options available for the service.
     */
    variations?: Array<Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationOutputDto> | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationOutputDto =
  {
    /**
     * Id of Variation
     */
    id?: number;
    /**
     * Id of Service the variation belongs to
     */
    serviceId?: number;
    /**
     * What the service's pricing module varies by
     */
    label?: string | null;
    /**
     * The specific value associated with the variation label influencing its pricing option.
     */
    value?: string | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationPackagesOutputDto =
  {
    /**
     * Id of Variation
     */
    id?: number;
    /**
     * Id of Service the variation belongs to
     */
    serviceId?: number;
    /**
     * What the service's pricing module varies by
     */
    label?: string | null;
    /**
     * The specific value associated with the variation label influencing its pricing option.
     */
    value?: string | null;
    /**
     * Packages of service variation
     */
    packages?: Array<LegalConnect_Common_Dtos_Services_ServiceVariationPackageDto> | null;
  };

export type Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto =
  {
    /**
     * Subscription Id
     */
    id?: number;

    status?: LegalConnect_Common_Enums_SubscriptionStatus;
    /**
     * Date subscription was closed
     */
    dateClosed?: string;
    /**
     * Client Id thus User Id
     */
    clientUserId?: string | null;
    /**
     * Legal Practitioner User Id
     */
    practitionerUserId?: string | null;
    /**
     * Service Package Title
     */
    packageTitle?: string | null;
    /**
     * Total number of appointments for Subscription
     */
    numberOfAppointments?: number;
    /**
     * Number of Appointments left in Subscription
     */
    remainingNumberOfAppointments?: number;
    /**
     * Service Id
     */
    serviceId?: number;
    /**
     * Name of Service user booked.
     */
    service?: string | null;
    /**
     * Service Variation Package Id
     */
    packageId?: number;
    /**
     * Tax percentage in decimals
     */
    taxRate?: number;
    /**
     * Tax amount
     */
    taxAmount?: number;
    /**
     * Discount percentage in decimals
     */
    discountPercentage?: number;
    /**
     * Discount amount
     */
    discountAmount?: number;
    amount?: number;
    /**
     * Payment link to navigate users to if subscription is for a paid Service
     */
    paymentUrl?: string | null;
  };

export type LegalConnect_Common_Dtos_ClientDto = {
  id?: number;
  userId?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  phone?: string | null;
  isActive?: boolean | null;
  email?: string | null;
  userName?: string | null;
  city?: string | null;
  state?: string | null;
  country?: string | null;
  profilePhotoUrl?: string | null;
  campaignCode?: string | null;
  roles?: Array<string> | null;
  companies?: Array<LegalConnect_Common_Dtos_CompanyDto> | null;
};

export type LegalConnect_Common_Dtos_CompanyDto = {
  name?: string | null;
  email?: string | null;
  city?: string | null;
  state?: string | null;
  country?: string | null;
  registrationNumber?: string | null;
  phoneNumber?: string | null;
  industry?: string | null;
  adminEmail?: string | null;
  id?: string | null;
  admins?: Array<LegalConnect_Common_Dtos_ClientDto> | null;
  invitedAdmins?: Array<LegalConnect_Common_Dtos_ClientDto> | null;
};

/**
 * Language spoken by user
 */
export type LegalConnect_Common_Dtos_LanguageDto = {
  /**
   * Language Id
   */
  id?: number;
  /**
   * Name of Language spoken by User
   */
  name?: string | null;
};

/**
 * Pricing package of a give service variation
 */
export type LegalConnect_Common_Dtos_Services_ServiceVariationPackageDto = {
  /**
   * Package Id
   */
  id?: number;
  /**
   * Package Type Id
   */
  packageId?: number;
  /**
   * Base Price of package
   */
  rate?: number;
  /**
   * Discount amount
   */
  discountAmount?: number;
  /**
   * Discount percentage
   */
  discountPercentage?: number;
  /**
   * Tax amount
   */
  taxAmount?: number;
  /**
   * Tax percentage
   */
  taxRate?: number;
  /**
   * Duration of each session
   */
  sessionDuration?: number;
  /**
   * Number of allowed sessions
   */
  numberOfSession?: number;
  /**
   * Package Type Title
   */
  packageTitle?: string | null;
  /**
   * Package Type Description
   */
  packageDescription?: string | null;
  /**
   * If true, one-to-one chat will be available to user
   */
  isChatInclusive?: boolean;
  /**
   * If true, audio calls sessions will be available to user
   */
  isAudioCallInclusive?: boolean;
  /**
   * If true, video call session will be available to user
   */
  isVideoCallInclusive?: boolean;
  /**
   * If true, audio calls will be recorded
   */
  isAudioCallRecorded?: boolean;
  /**
   * If true, video calls will be recorded
   */
  isVideoCallRecorded?: boolean;
  /**
   * If true, user will be able to receive customer support via email correspondence
   */
  isPlatformEmailSupportInclusive?: boolean;
  /**
   * If true, user will be able to receive customer support via chat
   */
  isPlatformChatSupportInclusive?: boolean;
  /**
   * If true, user will be able to receive customer support phone calls
   */
  isPlatformPhoneSupportInclusive?: boolean;
  /**
   * If true, user will be able to request for a document review for free
   */
  isFreeDocumentReviewInclusive?: boolean;
};

/**
 * Type of session of a given appointment
 * * `0` - A video call session,
 * * `1` - An Audio only call session,
 * * `2` - A chat only session,
 */
export type LegalConnect_Common_Enums_CommunicationMedium = 0 | 1 | 2;

export type LegalConnect_Common_Enums_ReviewSortParams = 0 | 1;

/**
 * Indicates the status of the appointment whether it is
 * * `0` - Pending,
 * * `1` - Appointment Session has started,
 * * `2` - Appointment Session has ended,
 * * `3` - Appointment was cancelled,
 * * `4` - Appointment was missed.,
 * * `5` - Appointment was rescheduled,
 */
export type LegalConnect_Common_Enums_SessionStatus = 0 | 1 | 2 | 3 | 4 | 5;

/**
 * Indicates if file has been signed or not
 * * `0` - Pending signatures
 * * `1` - Complete - File has been signed
 */
export type LegalConnect_Common_Enums_SignatureStatus = 0 | 1;

/**
 * Subscription status
 * * `0` - Pending,
 * * `1` - Active,
 * * `2` - Closed,
 */
export type LegalConnect_Common_Enums_SubscriptionStatus = 0 | 1 | 2;

export type LegalConnect_Shared_Core_Http_ErrorInfo = {
  /**
   * Error code.
   */
  code?: number;
  /**
   * Error message.
   */
  message?: string | null;
  /**
   * Error details.
   */
  details?: unknown;
};

export type LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper = {
  /**
   * Indicates success status of the result.
   */
  success?: boolean;
  error?: LegalConnect_Shared_Core_Http_ErrorInfo;
};

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_GetAppointmentOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_EmbeddedSignatureRequestClaim =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestClaim;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_GetLegalPractitionerOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PractitionerScheduleDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_PractitionerScheduleDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_ServiceOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_SubscriptionOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_ClientDto = {
  /**
   * Indicates success status of the result.
   */
  success?: boolean;
  error?: LegalConnect_Shared_Core_Http_ErrorInfo;
  result?: LegalConnect_Common_Dtos_ClientDto;
};

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetLegalPractitionerOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: LegalConnect_Shared_Core_Paging_PagedList_GetLegalPractitionerOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetAppointmentOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: LegalConnect_Shared_Core_Paging_PagedList_GetAppointmentOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetFileOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: LegalConnect_Shared_Core_Paging_PagedList_GetFileOutputDto;
  };
  export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetFileSharedOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: LegalConnect_Shared_Core_Paging_PagedList_GetFileSharedOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_ServiceCategories =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: LegalConnect_Shared_Core_Paging_PagedList_ServiceCategoryOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_ServiceOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: LegalConnect_Shared_Core_Paging_PagedList_ServiceOutputDto;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_SubscriptionOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    result?: Array<LegalConnect_Shared_Core_Paging_PagedList_SubscriptionOutputDto>;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_GetFilesOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    /**
     * The actual result object of Http request. Has value if Success property is true.
     */
    result?: Array<Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto> | null;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_ServiceVariationPackagesOutputDto =
  {
    /**
     * Indicates success status of the result.
     */
    success?: boolean;
    error?: LegalConnect_Shared_Core_Http_ErrorInfo;
    /**
     * The actual result object of Http request. Has value if Success property is true.
     */
    result?: Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceVariationPackagesOutputDto | null;
  };

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1 = {
  /**
   * Indicates success status of the result.
   */
  success?: boolean;
  error?: LegalConnect_Shared_Core_Http_ErrorInfo;
  /**
   * The actual result object of Http request. Has value if Success property is true.
   */
  result?: Array<string> | null;
};

export type LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_String = {
  /**
   * Indicates success status of the result.
   */
  success?: boolean;
  error?: LegalConnect_Shared_Core_Http_ErrorInfo;
  /**
   * The actual result object of Http request. Has value if Success property is true.
   */
  result?: Array<string> | null;
};

export type LegalConnect_Shared_Core_Paging_PagedList_GetAppointmentOutputDto =
  {
    readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_Appointments_GetAppointmentOutputDto> | null;
    totalCount?: number;
    pageSize?: number;
  };

export type LegalConnect_Shared_Core_Paging_PagedList_GetFileOutputDto = {
  readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileOutputDto> | null;
  totalCount?: number;
  pageSize?: number;
};

export type LegalConnect_Shared_Core_Paging_PagedList_GetFileSharedOutputDto = {
  readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_Documents_GetFileSharedOutputDto> | null;
  totalCount?: number;
  pageSize?: number;
};

export type LegalConnect_Shared_Core_Paging_PagedList_GetLegalPractitionerOutputDto =
  {
    readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_LegalPractitioners_GetLegalPractitionerOutputDto> | null;
    totalCount?: number;
    pageSize?: number;
  };

export type LegalConnect_Shared_Core_Paging_PagedList_ServiceCategoryOutputDto =
  {
    readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceCategoryOutputDto> | null;
    totalCount?: number;
    pageSize?: number;
  };

export type LegalConnect_Shared_Core_Paging_PagedList_ServiceOutputDto = {
  readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_Services_ServiceOutputDto> | null;
  totalCount?: number;
  pageSize?: number;
};

export type LegalConnect_Shared_Core_Paging_PagedList_SubscriptionOutputDto = {
  readonly data?: Array<Developer_Dashboard_HttpAggregator_Contracts_Subscriptions_SubscriptionOutputDto> | null;
  totalCount?: number;
  pageSize?: number;
};

export type $OpenApiTs = {
  "/api/v1/appointments": {
    get: {
      req: {
        /**
         * User Id
         */
        clientUserId: string;
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * The starting date schedulted rage to filter the appointments result
         */
        from?: string;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        skipCount?: number;
        /**
         * Filter based on session status
         * * `Pending` - Pending,
         * * `Started` - Appointment Session has started,
         * * `Ended` - Appointment Session has ended,
         * * `Cancelled` - Appointment was cancelled,
         * * `Missed` - Appointment was missed.,
         * * `Rescheduled` - Appointment was rescheduled,
         */
        statuses?: Array<string>;
        /**
         * The ending date range of the schedule to filter the appointments result.
         */
        to?: string;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetAppointmentOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
    post: {
      req: {
        requestBody?: Developer_Dashboard_HttpAggregator_Contracts_Appointments_CreateAppointmentInputDto;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_GetAppointmentOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/appointments/reschedule": {
    put: {
      req: {
        requestBody?: Developer_Dashboard_HttpAggregator_Contracts_Appointments_RescheduleApppointmentInputDto;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PractitionerScheduleDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/clients/Me": {
    get: {
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_ClientDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/documents/me": {
    get: {
      req: {
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * Text value to filter by the File Name. Uses contains query
         */
        name?: string;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        /**
         * True if results should return only files that have been sent out for signatures
         */
        signingRequried?: boolean;
        skipCount?: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetFileSharedOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/documents/appointments/{subscriptionId}/{legalPractitionerUserId}": {
    post: {
      req: {
        formData?: {
          files?: Array<Blob | File>;
        };
        /**
         * User Id of Legal Practitioner
         */
        legalPractitionerUserId: string;
        /**
         * Subscription Id
         */
        subscriptionId: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_GetFilesOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/documents/save": {
    post: {
      req: {
        formData?: {
          files?: Array<Blob | File>;
        };
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetFileOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/documents/embedded-signature-request": {
    post: {
      req: {
        requestBody?: Developer_Dashboard_HttpAggregator_Contracts_Documents_EmbeddedSignatureRequestInputDto;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_EmbeddedSignatureRequestClaim;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners": {
    get: {
      req: {
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * Email of Legal Practitioner to filter by - uses contains query
         */
        email?: string;
        /**
         * First name of Legal Practitioner to filter by - uses contains query
         */
        firstName?: string;
        /**
         * Filter by language spoken by Legal Practitioners
         */
        languages?: Array<string>;
        /**
         * Last name of Legal Practitioner to filter by - uses contains query
         */
        lastName?: string;
        /**
         * Filter by city of residence of Legal Practitioners
         */
        location?: string;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        /**
         * Filter by list of Services offered by Legal Practitioners
         */
        services?: Array<string>;
        skipCount?: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_GetLegalPractitionerOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners/{userId}": {
    get: {
      req: {
        /**
         * Legal Practitioner User Id
         */
        userId: string;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_GetLegalPractitionerOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners/{userId}/schedule": {
    get: {
      req: {
        /**
         * User Id of Legal Practitioner
         */
        userId: string;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PractitionerScheduleDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners/{userId}/schedule/slots": {
    get: {
      req: {
        /**
         * Day of schedule
         */
        date?: string;
        /**
         * Package Id
         */
        packageId: number;
        /**
         * Service Variation Id
         */
        variationId: number;
        /**
         * User Id of Legal Practitioner
         */
        userId: string;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners/{userId}/reviews": {
    get: {
      req: {
        requestBody?: Developer_Dashboard_HttpAggregator_Contracts_Reviews_GetReviewInputDto;
        userId: string;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_1;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners/cities": {
    get: {
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_String;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/legalpractitioners/languages": {
    get: {
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_String;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/services": {
    get: {
      req: {
        /**
         * Category Ids of Service Categories to filter by
         */
        categoryIds?: Array<number>;
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        /**
         * Text value to filter by the Service Title. Uses contains query
         */
        searchParam?: string;
        skipCount?: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_ServiceOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/services/{id}": {
    get: {
      req: {
        /**
         * Service Id
         */
        id: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_ServiceOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/services/variations/{id}/packages": {
    get: {
      req: {
        /**
         * Discount Code
         */
        campaignCode?: string;
        /**
         * Country user is accessing this Legal Service from. This is used to calculate the tax amount for the packages.
         */
        country?: string;
        /**
         * Service Variation Id
         */
        id: number;
        /**
         * Only required when Service variation is of "Document Review"
         */
        numberOfPages?: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_ServiceVariationPackagesOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/services/categories": {
    get: {
      req: {
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        skipCount?: number;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_ServiceCategories;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/subscriptions/users": {
    get: {
      req: {
        /**
         * Client Id thus User Id
         */
        clientUserId: string;
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        /**
         * Legal Practitioner User Id
         */
        practitionerUserId: string;
        /**
         * Service Variation Id
         */
        serviceId: number;
        skipCount?: number;
        /**
         * Specific Subscription Statuses of Subscription to filter by
         * Subscription status
         * * `0` - Pending,
         * * `1` - Active,
         * * `2` - Closed,
         */
        statuses?: Array<string>;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_SubscriptionOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/subscriptions/available": {
    get: {
      req: {
        /**
         * Client Id thus User Id
         */
        clientUserId: string;
        /**
         * If set to true, the default paga size of 20 will be ignored if no PageSize is specified.
         */
        disablePagination?: boolean;
        /**
         * Page number of record. NB: Zero indexed based
         */
        page?: number;
        /**
         * Page size of records. Default to 20
         */
        pageSize?: number;
        /**
         * Legal Practitioner User Id
         */
        practitionerUserId: string;
        /**
         * Service Variation Id
         */
        serviceId: number;
        skipCount?: number;
        /**
         * Specific Subscription Statuses of Subscription to filter by
         * Subscription status
         * * `0` - Pending,
         * * `1` - Active,
         * * `2` - Closed,
         */
        statuses?: Array<string>;
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_PagedList_SubscriptionOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
  "/api/v1/subscriptions": {
    post: {
      req: {
        formData?: {
          /**
           * Date scheduled for first Appointment
           */
          scheduleDate?: string;
          /**
           * Text notes to be shared with Legal Practitioner ahead of first Appointment
           */
          discussionNotes?: string;
          /**
           * Client Id thus User Id
           */
          clientUserId: string;
          /**
           * Legal Practitioner User Id
           */
          practitionerUserId: string;
          /**
           * Service Id
           * ///
           */
          serviceId: number;
          /**
           * Service Variation Id
           */
          variationId: number;
          /**
           * Service Variation Package Id
           */
          packageId: number;
          /**
           * Discount code
           */
          campaignCode?: string;
          /**
           * Payment Url callback
           */
          callbackUrl: string;
          /**
           * Only required when Service is "Contract Review"
           */
          numberOfPages?: number;
          files?: Array<Blob | File>;
        };
      };
      res: {
        /**
         * Success
         */
        200: LegalConnect_Shared_Core_Http_HttpAPIResponseWrapper_SubscriptionOutputDto;
        /**
         * Bad Request
         */
        400: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Unauthorized
         */
        401: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Forbidden
         */
        403: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
        /**
         * Server Error
         */
        500: LegalConnect_Shared_Core_Http_HttpAPIErrorResponseWrapper;
      };
    };
  };
};
